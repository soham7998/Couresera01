*Write a program that prompts for a file name, then opens that file and reads through the file, looking for lines of the form:
X-DSPAM-Confidence:    0.8475
Count these lines and extract the floating point values from each of the lines and compute the average of those values and produce an output as shown below. Do not use the sum() function or a variable named sum in your solution.



file_name = input("Enter the file name: ")

try:
    file_handle = open(file_name, 'r')
    count = 0
    total = 0.0

    for line in file_handle:
        if line.startswith("X-DSPAM-Confidence:"):
            count += 1
            value = float(line.split(':')[1].strip())
            total += value

    file_handle.close()

    if count > 0:
        average = total / count
        print("Average spam confidence:", average)
    else:
        print("No lines found with 'X-DSPAM-Confidence:'")

except FileNotFoundError:
    print("File not found.")


*Write a program that prompts for a file name, then opens that file and reads through the file, and print the contents of the file in upper case. Use the file words.txt to produce the output below.

file_name = input("Enter the file name: ")

try:
    file_handle = open(file_name, 'r')
    contents = file_handle.read()
    file_handle.close()

    # Convert the contents to uppercase and remove double newlines
    contents_upper = contents.upper().strip()

    # Print the uppercase contents
    print(contents_upper)

except FileNotFoundError:
    print("File not found.")


*Open the file romeo.txt and read it line by line. For each line, split the line into a list of words using the split() method. The program should build a list of words. For each word on each line check to see if the word is already in the list and if not append it to the list. When the program completes, sort and print the resulting words in python sort() order as shown in the desired output.

word_list = []

# Open the file
with open("romeo.txt", "r") as file:
    # Read the file line by line
    for line in file:
        # Split the line into words
        words = line.split()
        
        # Iterate over the words
        for word in words:
            # Check if the word is already in the list
            if word not in word_list:
                # Append the word to the list
                word_list.append(word)

# Sort and print the resulting words
word_list.sort()

print(word_list)

*Open the file mbox-short.txt and read it line by line. When you find a line that starts with 'From ' like the following line:
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
You will parse the From line using split() and print out the second word in the line (i.e. the entire address of the person who sent the message). Then print out a count at the end.
Hint: make sure not to include the lines that start with 'From:'. Also look at the last line of the sample output to see how to print the count.

count = 0
emails = []

# Open the file
with open("mbox-short.txt", "r") as file:
    # Read the file line by line
    for line in file:
        # Check if the line starts with 'From ' and not 'From:'
        if line.startswith('From ') and not line.startswith('From:'):
            # Split the line into words
            words = line.split()
            
            # Extract and append the second word (email address)
            email = words[1]
            emails.append(email)
            
            # Increment the count
            count += 1

# Print the extracted emails
for email in emails:
    print(email)

# Print the count at the end
print("There were", count, "lines in the file with From as the first word")



*Write a program to read through the mbox-short.txt and figure out who has sent the greatest number of mail messages. The program looks for 'From ' lines and takes the second word of those lines as the person who sent the mail. The program creates a Python dictionary that maps the sender's mail address to a count of the number of times they appear in the file. After the dictionary is produced, the program reads through the dictionary using a maximum loop to find the most prolific committer.

file_name = 'mbox-short.txt'

# Create an empty dictionary to store the sender counts
sender_counts = {}

# Read the file line by line
with open(file_name, 'r') as file:
    for line in file:
        if line.startswith('From '):
            # Split the line into words and extract the sender's email address
            words = line.split()
            sender = words[1]

            # Update the sender's count in the dictionary
            sender_counts[sender] = sender_counts.get(sender, 0) + 1

# Find the most prolific sender using a maximum loop
most_prolific_sender = None
most_prolific_count = 0

for sender, count in sender_counts.items():
    if count > most_prolific_count:
        most_prolific_sender = sender
        most_prolific_count = count

# Print the result
print(most_prolific_sender, most_prolific_count)


